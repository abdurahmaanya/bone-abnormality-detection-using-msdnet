{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1ScUl9zLLxkWCwgkGis7TYs8XCC-ZpDmn","timestamp":1687892260836}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LNhl7KS_MY2h","executionInfo":{"status":"ok","timestamp":1621879786253,"user_tz":-180,"elapsed":42496,"user":{"displayName":"Cabdiraxmaan Yusuf","photoUrl":"","userId":"01857871583179459739"}},"outputId":"9bc862fe-3ea6-44d8-e00a-08b106cb591f"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n","%cd /content/gdrive"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive\n","/content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wisQ5xAbJqKz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618651033576,"user_tz":-180,"elapsed":1056,"user":{"displayName":"Cabdiraxmaan Yusuf","photoUrl":"","userId":"01857871583179459739"}},"outputId":"cf73d19b-ef46-4b40-e7ac-686fae60c6ee"},"source":["%cd /content\n","#!git clone https://github.com/kalviny/MSDNet-PyTorch.git"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nqsdZKjaOAk2"},"source":["%cd /content\n","!unzip /content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1.zip -d /content/gdrive/MyDrive/MSDNet-PyTorch"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V_Xv_th2dEVq","executionInfo":{"status":"ok","timestamp":1619742790934,"user_tz":-180,"elapsed":669949,"user":{"displayName":"Cabdiraxmaan Yusuf","photoUrl":"","userId":"01857871583179459739"}},"outputId":"7a7d25b8-05ea-44ba-e906-4e9c8dc56781"},"source":["## convert Train dataset into ImageNet format\n","import os\n","import cv2\n","import pandas as pd\n","train=pd.read_csv('/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1/train_labeled_studies.csv',header=None)\n","list_of_image_folders=train[0]\n","\n","%cd /content/gdrive/MyDrive/MSDNet-PyTorch/\n","\n","count=0\n","for folder in list_of_image_folders:\n","    directory_of_images=folder\n","    for file in os.listdir(directory_of_images):\n","        if folder[-10:-1]=='_positive':\n","            img = cv2.imread(folder+file)\n","            filename='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1/train/abnormal/image_'+str(count)+'.png'\n","            cv2.imwrite(filename,img)\n","            count+=1\n","        else:\n","            img = cv2.imread(folder+file)\n","            filename='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1/train/normal/image'+str(count)+'.png'\n","            cv2.imwrite(filename,img)\n","            count+=1"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content/gdrive/MyDrive/MSDNet-PyTorch\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u95czk4WDZeD","executionInfo":{"status":"ok","timestamp":1619742943841,"user_tz":-180,"elapsed":152875,"user":{"displayName":"Cabdiraxmaan Yusuf","photoUrl":"","userId":"01857871583179459739"}},"outputId":"7eac926e-db31-465e-9aaa-3f1d7acdd75e"},"source":["## convert validation dataset into ImageNet format\n","import os\n","import cv2\n","import pandas as pd\n","train=pd.read_csv('/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1/valid_labeled_studies.csv',header=None)\n","list_of_image_folders=train[0]\n","\n","%cd /content/gdrive/MyDrive/MSDNet-PyTorch/\n","\n","count=0\n","for folder in list_of_image_folders:\n","    directory_of_images=folder\n","    for file in os.listdir(directory_of_images):\n","        if folder[-10:-1]=='_positive':\n","            img = cv2.imread(folder+file)\n","            filename='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1/valid/abnormal/image_'+str(count)+'.png'\n","            cv2.imwrite(filename,img)\n","            count+=1\n","        else:\n","            img = cv2.imread(folder+file)\n","            filename='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1/valid/normal/image'+str(count)+'.png'\n","            cv2.imwrite(filename,img)\n","            count+=1"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content/gdrive/MyDrive/MSDNet-PyTorch\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aJ3TMfFWKRuz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619873599774,"user_tz":-180,"elapsed":1624569,"user":{"displayName":"Cabdiraxmaan Yusuf","photoUrl":"","userId":"01857871583179459739"}},"outputId":"8de6ad5a-454f-4ae2-b9cf-3e85b7217ce4"},"source":["#%%capture\n","#training the model\n","%cd /content\n","!python3 /content/gdrive/MyDrive/MSDNet-PyTorch/main.py --data-root /content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1 --data ImageNet --save /content/gdrive/MyDrive/MSDNet-PyTorch/weights/ \\\n","                --arch msdnet --batch-size 64 --epochs 90 --nBlocks 5 \\\n","                --stepmode even --step 4 --base 4 --nChannels 32 --growthRate 16 \\\n","                --grFactor 1-2-4-4 --bnFactor 1-2-4-4 \\\n","                --gpu 0,1,2,3 -j 2 \\"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content\n","building network of steps: \n","[4, 4, 4, 4, 4] 20\n"," ********************** Block 1  **********************\n","|\t\tinScales 4 outScales 4 inChannels 32 outChannels 16\t\t|\n","\n","|\t\tinScales 4 outScales 4 inChannels 48 outChannels 16\t\t|\n","\n","|\t\tinScales 4 outScales 4 inChannels 64 outChannels 16\t\t|\n","\n","|\t\tinScales 4 outScales 4 inChannels 80 outChannels 16\t\t|\n","\n"," ********************** Block 2  **********************\n","|\t\tinScales 4 outScales 4 inChannels 96 outChannels 16\t\t|\n","\n","|\t\tinScales 4 outScales 3 inChannels 112 outChannels 16\t\t|\n","|\t\tTransition layer inserted! (max), inChannels 128, outChannels 64\t|\n","\n","|\t\tinScales 3 outScales 3 inChannels 64 outChannels 16\t\t|\n","\n","|\t\tinScales 3 outScales 3 inChannels 80 outChannels 16\t\t|\n","\n"," ********************** Block 3  **********************\n","|\t\tinScales 3 outScales 3 inChannels 96 outChannels 16\t\t|\n","\n","|\t\tinScales 3 outScales 3 inChannels 112 outChannels 16\t\t|\n","\n","|\t\tinScales 3 outScales 2 inChannels 128 outChannels 16\t\t|\n","|\t\tTransition layer inserted! (max), inChannels 144, outChannels 72\t|\n","\n","|\t\tinScales 2 outScales 2 inChannels 72 outChannels 16\t\t|\n","\n"," ********************** Block 4  **********************\n","|\t\tinScales 2 outScales 2 inChannels 88 outChannels 16\t\t|\n","\n","|\t\tinScales 2 outScales 2 inChannels 104 outChannels 16\t\t|\n","\n","|\t\tinScales 2 outScales 2 inChannels 120 outChannels 16\t\t|\n","\n","|\t\tinScales 2 outScales 1 inChannels 136 outChannels 16\t\t|\n","|\t\tTransition layer inserted! (max), inChannels 152, outChannels 76\t|\n","\n"," ********************** Block 5  **********************\n","|\t\tinScales 1 outScales 1 inChannels 76 outChannels 16\t\t|\n","\n","|\t\tinScales 1 outScales 1 inChannels 92 outChannels 16\t\t|\n","\n","|\t\tinScales 1 outScales 1 inChannels 108 outChannels 16\t\t|\n","\n","|\t\tinScales 1 outScales 1 inChannels 124 outChannels 16\t\t|\n","\n","---------------------\n","FLOPs: 339.90M, Params: 4.24M\n","---------------------\n","FLOPs: 685.46M, Params: 8.77M\n","---------------------\n","FLOPs: 1008.16M, Params: 13.07M\n","---------------------\n","FLOPs: 1254.47M, Params: 16.75M\n","---------------------\n","FLOPs: 1360.53M, Params: 23.96M\n","building network of steps: \n","[4, 4, 4, 4, 4] 20\n"," ********************** Block 1  **********************\n","|\t\tinScales 4 outScales 4 inChannels 32 outChannels 16\t\t|\n","\n","|\t\tinScales 4 outScales 4 inChannels 48 outChannels 16\t\t|\n","\n","|\t\tinScales 4 outScales 4 inChannels 64 outChannels 16\t\t|\n","\n","|\t\tinScales 4 outScales 4 inChannels 80 outChannels 16\t\t|\n","\n"," ********************** Block 2  **********************\n","|\t\tinScales 4 outScales 4 inChannels 96 outChannels 16\t\t|\n","\n","|\t\tinScales 4 outScales 3 inChannels 112 outChannels 16\t\t|\n","|\t\tTransition layer inserted! (max), inChannels 128, outChannels 64\t|\n","\n","|\t\tinScales 3 outScales 3 inChannels 64 outChannels 16\t\t|\n","\n","|\t\tinScales 3 outScales 3 inChannels 80 outChannels 16\t\t|\n","\n"," ********************** Block 3  **********************\n","|\t\tinScales 3 outScales 3 inChannels 96 outChannels 16\t\t|\n","\n","|\t\tinScales 3 outScales 3 inChannels 112 outChannels 16\t\t|\n","\n","|\t\tinScales 3 outScales 2 inChannels 128 outChannels 16\t\t|\n","|\t\tTransition layer inserted! (max), inChannels 144, outChannels 72\t|\n","\n","|\t\tinScales 2 outScales 2 inChannels 72 outChannels 16\t\t|\n","\n"," ********************** Block 4  **********************\n","|\t\tinScales 2 outScales 2 inChannels 88 outChannels 16\t\t|\n","\n","|\t\tinScales 2 outScales 2 inChannels 104 outChannels 16\t\t|\n","\n","|\t\tinScales 2 outScales 2 inChannels 120 outChannels 16\t\t|\n","\n","|\t\tinScales 2 outScales 1 inChannels 136 outChannels 16\t\t|\n","|\t\tTransition layer inserted! (max), inChannels 152, outChannels 76\t|\n","\n"," ********************** Block 5  **********************\n","|\t\tinScales 1 outScales 1 inChannels 76 outChannels 16\t\t|\n","\n","|\t\tinScales 1 outScales 1 inChannels 92 outChannels 16\t\t|\n","\n","|\t\tinScales 1 outScales 1 inChannels 108 outChannels 16\t\t|\n","\n","|\t\tinScales 1 outScales 1 inChannels 124 outChannels 16\t\t|\n","\n","Epoch: [0][1/29]\tTime 2.548\tData 0.943\tLoss 34.6628\tAcc@1 0.0000\tAcc@5 0.0000\n","Epoch: [0][11/29]\tTime 0.537\tData 0.145\tLoss 3.5526\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [0][21/29]\tTime 3.644\tData 3.325\tLoss 3.6210\tAcc@1 62.5000\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 19.220\tData 19.149\tLoss 70.7088\tAcc@1 75.0000\tAcc@5 100.0000\n"," * prec@1 55.814 prec@5 100.000\n"," * prec@1 56.478 prec@5 100.000\n"," * prec@1 54.817 prec@5 100.000\n"," * prec@1 52.824 prec@5 100.000\n"," * prec@1 56.811 prec@5 100.000\n","Best var_prec1 56.8106317361724\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_000.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_000.pth.tar'\n","Epoch: [1][1/29]\tTime 1.316\tData 0.963\tLoss 4.1089\tAcc@1 62.5000\tAcc@5 100.0000\n","Epoch: [1][11/29]\tTime 0.541\tData 0.265\tLoss 3.5740\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [1][21/29]\tTime 0.527\tData 0.243\tLoss 2.9943\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.061\tData 0.973\tLoss 4.9700\tAcc@1 43.7500\tAcc@5 100.0000\n"," * prec@1 58.804 prec@5 100.000\n"," * prec@1 61.462 prec@5 100.000\n"," * prec@1 64.120 prec@5 100.000\n"," * prec@1 62.791 prec@5 100.000\n"," * prec@1 63.123 prec@5 100.000\n","Best var_prec1 63.12292485538115\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","Epoch: [2][1/29]\tTime 1.295\tData 0.926\tLoss 3.2712\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [2][11/29]\tTime 0.544\tData 0.274\tLoss 3.4909\tAcc@1 59.3750\tAcc@5 100.0000\n","Epoch: [2][21/29]\tTime 0.514\tData 0.240\tLoss 3.1844\tAcc@1 60.9375\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.064\tData 0.972\tLoss 3.9252\tAcc@1 43.7500\tAcc@5 100.0000\n"," * prec@1 59.136 prec@5 100.000\n"," * prec@1 60.465 prec@5 100.000\n"," * prec@1 59.468 prec@5 100.000\n"," * prec@1 57.475 prec@5 100.000\n"," * prec@1 59.136 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","Epoch: [3][1/29]\tTime 1.214\tData 0.847\tLoss 3.1445\tAcc@1 60.9375\tAcc@5 100.0000\n","Epoch: [3][11/29]\tTime 0.532\tData 0.259\tLoss 3.3830\tAcc@1 60.9375\tAcc@5 100.0000\n","Epoch: [3][21/29]\tTime 0.498\tData 0.220\tLoss 3.1105\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.032\tData 0.946\tLoss 6.1685\tAcc@1 18.7500\tAcc@5 100.0000\n"," * prec@1 54.817 prec@5 100.000\n"," * prec@1 54.817 prec@5 100.000\n"," * prec@1 54.485 prec@5 100.000\n"," * prec@1 53.821 prec@5 100.000\n"," * prec@1 54.817 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","Epoch: [4][1/29]\tTime 1.169\tData 0.856\tLoss 3.4573\tAcc@1 59.3750\tAcc@5 100.0000\n","Epoch: [4][11/29]\tTime 0.527\tData 0.260\tLoss 3.6781\tAcc@1 65.6250\tAcc@5 100.0000\n","Epoch: [4][21/29]\tTime 0.495\tData 0.228\tLoss 3.0406\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.034\tData 0.964\tLoss 5.2588\tAcc@1 25.0000\tAcc@5 100.0000\n"," * prec@1 58.472 prec@5 100.000\n"," * prec@1 56.811 prec@5 100.000\n"," * prec@1 57.143 prec@5 100.000\n"," * prec@1 57.807 prec@5 100.000\n"," * prec@1 58.472 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","Epoch: [5][1/29]\tTime 1.203\tData 0.872\tLoss 2.7944\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [5][11/29]\tTime 0.522\tData 0.235\tLoss 3.3422\tAcc@1 64.0625\tAcc@5 100.0000\n","Epoch: [5][21/29]\tTime 0.495\tData 0.210\tLoss 3.1959\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.058\tData 0.984\tLoss 6.6410\tAcc@1 23.4375\tAcc@5 100.0000\n"," * prec@1 62.791 prec@5 100.000\n"," * prec@1 59.468 prec@5 100.000\n"," * prec@1 60.133 prec@5 100.000\n"," * prec@1 58.140 prec@5 100.000\n"," * prec@1 57.807 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","Epoch: [6][1/29]\tTime 1.219\tData 0.891\tLoss 3.2927\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [6][11/29]\tTime 0.512\tData 0.238\tLoss 3.0963\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [6][21/29]\tTime 0.481\tData 0.211\tLoss 3.2772\tAcc@1 67.1875\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.041\tData 0.935\tLoss 4.9954\tAcc@1 35.9375\tAcc@5 100.0000\n"," * prec@1 59.468 prec@5 100.000\n"," * prec@1 61.462 prec@5 100.000\n"," * prec@1 60.797 prec@5 100.000\n"," * prec@1 59.136 prec@5 100.000\n"," * prec@1 60.465 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","Epoch: [7][1/29]\tTime 1.158\tData 0.887\tLoss 3.5485\tAcc@1 60.9375\tAcc@5 100.0000\n","Epoch: [7][11/29]\tTime 0.523\tData 0.251\tLoss 2.9042\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [7][21/29]\tTime 0.497\tData 0.222\tLoss 3.0001\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.019\tData 0.950\tLoss 6.6978\tAcc@1 20.3125\tAcc@5 100.0000\n"," * prec@1 54.485 prec@5 100.000\n"," * prec@1 57.475 prec@5 100.000\n"," * prec@1 56.478 prec@5 100.000\n"," * prec@1 56.478 prec@5 100.000\n"," * prec@1 56.146 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","Epoch: [8][1/29]\tTime 1.108\tData 0.834\tLoss 3.8755\tAcc@1 57.8125\tAcc@5 100.0000\n","Epoch: [8][11/29]\tTime 0.527\tData 0.257\tLoss 2.9169\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [8][21/29]\tTime 0.492\tData 0.230\tLoss 2.9307\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.066\tData 0.959\tLoss 4.7160\tAcc@1 28.1250\tAcc@5 100.0000\n"," * prec@1 57.475 prec@5 100.000\n"," * prec@1 58.804 prec@5 100.000\n"," * prec@1 60.465 prec@5 100.000\n"," * prec@1 58.472 prec@5 100.000\n"," * prec@1 57.807 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","Epoch: [9][1/29]\tTime 1.220\tData 0.887\tLoss 2.9654\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [9][11/29]\tTime 0.519\tData 0.250\tLoss 3.1240\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [9][21/29]\tTime 0.486\tData 0.216\tLoss 3.1557\tAcc@1 62.5000\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.013\tData 0.944\tLoss 6.4532\tAcc@1 48.4375\tAcc@5 100.0000\n"," * prec@1 54.153 prec@5 100.000\n"," * prec@1 56.811 prec@5 100.000\n"," * prec@1 53.488 prec@5 100.000\n"," * prec@1 57.143 prec@5 100.000\n"," * prec@1 56.146 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","Epoch: [10][1/29]\tTime 1.151\tData 0.845\tLoss 3.3396\tAcc@1 57.8125\tAcc@5 100.0000\n","Epoch: [10][11/29]\tTime 0.527\tData 0.246\tLoss 2.7600\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [10][21/29]\tTime 0.492\tData 0.220\tLoss 2.8202\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.002\tData 0.919\tLoss 4.0579\tAcc@1 50.0000\tAcc@5 100.0000\n"," * prec@1 59.136 prec@5 100.000\n"," * prec@1 57.475 prec@5 100.000\n"," * prec@1 58.472 prec@5 100.000\n"," * prec@1 58.804 prec@5 100.000\n"," * prec@1 58.140 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","Epoch: [11][1/29]\tTime 1.207\tData 0.886\tLoss 2.9114\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [11][11/29]\tTime 0.510\tData 0.238\tLoss 2.9677\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [11][21/29]\tTime 0.483\tData 0.217\tLoss 3.8570\tAcc@1 59.3750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.043\tData 0.958\tLoss 3.6946\tAcc@1 31.2500\tAcc@5 100.0000\n"," * prec@1 59.801 prec@5 100.000\n"," * prec@1 62.126 prec@5 100.000\n"," * prec@1 59.801 prec@5 100.000\n"," * prec@1 57.475 prec@5 100.000\n"," * prec@1 56.146 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","Epoch: [12][1/29]\tTime 1.159\tData 0.880\tLoss 3.0724\tAcc@1 67.1875\tAcc@5 100.0000\n","Epoch: [12][11/29]\tTime 0.506\tData 0.233\tLoss 2.7221\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [12][21/29]\tTime 0.479\tData 0.205\tLoss 3.2563\tAcc@1 64.0625\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.068\tData 0.999\tLoss 4.0494\tAcc@1 37.5000\tAcc@5 100.0000\n"," * prec@1 54.485 prec@5 100.000\n"," * prec@1 55.150 prec@5 100.000\n"," * prec@1 57.143 prec@5 100.000\n"," * prec@1 55.482 prec@5 100.000\n"," * prec@1 58.140 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","Epoch: [13][1/29]\tTime 1.207\tData 0.896\tLoss 3.5045\tAcc@1 56.2500\tAcc@5 100.0000\n","Epoch: [13][11/29]\tTime 0.515\tData 0.245\tLoss 3.0918\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [13][21/29]\tTime 0.493\tData 0.218\tLoss 2.9605\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.045\tData 0.970\tLoss 6.4841\tAcc@1 39.0625\tAcc@5 100.0000\n"," * prec@1 58.472 prec@5 100.000\n"," * prec@1 60.133 prec@5 100.000\n"," * prec@1 58.472 prec@5 100.000\n"," * prec@1 57.807 prec@5 100.000\n"," * prec@1 57.475 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_001.pth.tar'\n","Epoch: [14][1/29]\tTime 1.200\tData 0.880\tLoss 3.0861\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [14][11/29]\tTime 0.520\tData 0.245\tLoss 3.2781\tAcc@1 64.0625\tAcc@5 100.0000\n","Epoch: [14][21/29]\tTime 0.491\tData 0.215\tLoss 3.3796\tAcc@1 64.0625\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.018\tData 0.947\tLoss 4.7779\tAcc@1 43.7500\tAcc@5 100.0000\n"," * prec@1 56.811 prec@5 100.000\n"," * prec@1 59.136 prec@5 100.000\n"," * prec@1 60.133 prec@5 100.000\n"," * prec@1 60.797 prec@5 100.000\n"," * prec@1 64.120 prec@5 100.000\n","Best var_prec1 64.11960183584017\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [15][1/29]\tTime 1.242\tData 0.919\tLoss 2.7907\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [15][11/29]\tTime 0.529\tData 0.246\tLoss 3.1272\tAcc@1 65.6250\tAcc@5 100.0000\n","Epoch: [15][21/29]\tTime 0.512\tData 0.230\tLoss 2.7122\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.043\tData 0.962\tLoss 2.8897\tAcc@1 65.6250\tAcc@5 100.0000\n"," * prec@1 60.465 prec@5 100.000\n"," * prec@1 58.140 prec@5 100.000\n"," * prec@1 59.801 prec@5 100.000\n"," * prec@1 59.136 prec@5 100.000\n"," * prec@1 60.133 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [16][1/29]\tTime 1.259\tData 0.910\tLoss 2.8794\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [16][11/29]\tTime 0.504\tData 0.231\tLoss 2.6613\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [16][21/29]\tTime 0.478\tData 0.206\tLoss 3.1812\tAcc@1 64.0625\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.024\tData 0.954\tLoss 8.4952\tAcc@1 0.0000\tAcc@5 100.0000\n"," * prec@1 52.492 prec@5 100.000\n"," * prec@1 50.498 prec@5 100.000\n"," * prec@1 50.498 prec@5 100.000\n"," * prec@1 49.834 prec@5 100.000\n"," * prec@1 49.502 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [17][1/29]\tTime 1.184\tData 0.874\tLoss 3.3920\tAcc@1 67.1875\tAcc@5 100.0000\n","Epoch: [17][11/29]\tTime 0.521\tData 0.257\tLoss 2.8853\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [17][21/29]\tTime 0.502\tData 0.229\tLoss 2.8758\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.020\tData 0.947\tLoss 6.3218\tAcc@1 35.9375\tAcc@5 100.0000\n"," * prec@1 62.126 prec@5 100.000\n"," * prec@1 60.133 prec@5 100.000\n"," * prec@1 61.130 prec@5 100.000\n"," * prec@1 61.130 prec@5 100.000\n"," * prec@1 61.462 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [18][1/29]\tTime 1.167\tData 0.863\tLoss 2.8482\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [18][11/29]\tTime 0.516\tData 0.231\tLoss 2.7576\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [18][21/29]\tTime 0.487\tData 0.205\tLoss 3.5461\tAcc@1 65.6250\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.077\tData 0.967\tLoss 5.0013\tAcc@1 28.1250\tAcc@5 100.0000\n"," * prec@1 60.465 prec@5 100.000\n"," * prec@1 61.794 prec@5 100.000\n"," * prec@1 61.794 prec@5 100.000\n"," * prec@1 61.130 prec@5 100.000\n"," * prec@1 60.133 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [19][1/29]\tTime 1.114\tData 0.848\tLoss 2.7632\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [19][11/29]\tTime 0.520\tData 0.254\tLoss 3.0266\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [19][21/29]\tTime 0.491\tData 0.225\tLoss 3.2690\tAcc@1 65.6250\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.030\tData 0.946\tLoss 2.0903\tAcc@1 81.2500\tAcc@5 100.0000\n"," * prec@1 57.143 prec@5 100.000\n"," * prec@1 52.159 prec@5 100.000\n"," * prec@1 53.821 prec@5 100.000\n"," * prec@1 54.153 prec@5 100.000\n"," * prec@1 54.485 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [20][1/29]\tTime 1.213\tData 0.894\tLoss 2.5165\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [20][11/29]\tTime 0.519\tData 0.251\tLoss 3.0920\tAcc@1 62.5000\tAcc@5 100.0000\n","Epoch: [20][21/29]\tTime 0.493\tData 0.224\tLoss 2.8787\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.059\tData 0.947\tLoss 2.2573\tAcc@1 67.1875\tAcc@5 100.0000\n"," * prec@1 54.817 prec@5 100.000\n"," * prec@1 56.811 prec@5 100.000\n"," * prec@1 58.140 prec@5 100.000\n"," * prec@1 57.807 prec@5 100.000\n"," * prec@1 59.136 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [21][1/29]\tTime 1.264\tData 0.966\tLoss 2.8852\tAcc@1 65.6250\tAcc@5 100.0000\n","Epoch: [21][11/29]\tTime 0.526\tData 0.254\tLoss 2.4527\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [21][21/29]\tTime 0.491\tData 0.224\tLoss 3.1564\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.019\tData 0.946\tLoss 4.7373\tAcc@1 31.2500\tAcc@5 100.0000\n"," * prec@1 66.113 prec@5 100.000\n"," * prec@1 64.120 prec@5 100.000\n"," * prec@1 63.123 prec@5 100.000\n"," * prec@1 62.791 prec@5 100.000\n"," * prec@1 61.130 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [22][1/29]\tTime 1.138\tData 0.856\tLoss 3.2808\tAcc@1 62.5000\tAcc@5 100.0000\n","Epoch: [22][11/29]\tTime 0.509\tData 0.233\tLoss 2.6290\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [22][21/29]\tTime 0.492\tData 0.219\tLoss 2.9400\tAcc@1 67.1875\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.062\tData 0.957\tLoss 3.4090\tAcc@1 60.9375\tAcc@5 100.0000\n"," * prec@1 63.123 prec@5 100.000\n"," * prec@1 61.794 prec@5 100.000\n"," * prec@1 65.781 prec@5 100.000\n"," * prec@1 65.449 prec@5 100.000\n"," * prec@1 62.126 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [23][1/29]\tTime 1.173\tData 0.852\tLoss 2.8565\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [23][11/29]\tTime 0.503\tData 0.234\tLoss 3.1580\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [23][21/29]\tTime 0.483\tData 0.212\tLoss 3.5489\tAcc@1 64.0625\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.029\tData 0.945\tLoss 6.5541\tAcc@1 25.0000\tAcc@5 100.0000\n"," * prec@1 55.482 prec@5 100.000\n"," * prec@1 56.146 prec@5 100.000\n"," * prec@1 55.482 prec@5 100.000\n"," * prec@1 58.140 prec@5 100.000\n"," * prec@1 59.801 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [24][1/29]\tTime 1.162\tData 0.865\tLoss 2.7043\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [24][11/29]\tTime 0.513\tData 0.250\tLoss 2.6553\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [24][21/29]\tTime 0.488\tData 0.224\tLoss 2.7083\tAcc@1 79.6875\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.148\tData 1.040\tLoss 6.1135\tAcc@1 12.5000\tAcc@5 100.0000\n"," * prec@1 56.811 prec@5 100.000\n"," * prec@1 52.824 prec@5 100.000\n"," * prec@1 52.159 prec@5 100.000\n"," * prec@1 52.824 prec@5 100.000\n"," * prec@1 54.153 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [25][1/29]\tTime 1.204\tData 0.834\tLoss 2.8206\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [25][11/29]\tTime 0.512\tData 0.219\tLoss 3.0555\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [25][21/29]\tTime 0.488\tData 0.211\tLoss 2.6670\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.045\tData 0.972\tLoss 4.0365\tAcc@1 54.6875\tAcc@5 100.0000\n"," * prec@1 64.452 prec@5 100.000\n"," * prec@1 64.120 prec@5 100.000\n"," * prec@1 65.116 prec@5 100.000\n"," * prec@1 65.449 prec@5 100.000\n"," * prec@1 63.787 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [26][1/29]\tTime 1.209\tData 0.948\tLoss 2.9251\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [26][11/29]\tTime 0.515\tData 0.257\tLoss 3.2251\tAcc@1 64.0625\tAcc@5 100.0000\n","Epoch: [26][21/29]\tTime 0.481\tData 0.220\tLoss 3.6175\tAcc@1 62.5000\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.035\tData 0.954\tLoss 6.1222\tAcc@1 34.3750\tAcc@5 100.0000\n"," * prec@1 57.807 prec@5 100.000\n"," * prec@1 58.804 prec@5 100.000\n"," * prec@1 59.468 prec@5 100.000\n"," * prec@1 58.804 prec@5 100.000\n"," * prec@1 58.472 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [27][1/29]\tTime 1.179\tData 0.865\tLoss 3.2853\tAcc@1 67.1875\tAcc@5 100.0000\n","Epoch: [27][11/29]\tTime 0.516\tData 0.246\tLoss 2.3802\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [27][21/29]\tTime 0.486\tData 0.217\tLoss 2.7595\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.033\tData 0.952\tLoss 6.3452\tAcc@1 0.0000\tAcc@5 100.0000\n"," * prec@1 49.834 prec@5 100.000\n"," * prec@1 50.498 prec@5 100.000\n"," * prec@1 51.827 prec@5 100.000\n"," * prec@1 51.495 prec@5 100.000\n"," * prec@1 51.495 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [28][1/29]\tTime 1.196\tData 0.896\tLoss 2.9443\tAcc@1 67.1875\tAcc@5 100.0000\n","Epoch: [28][11/29]\tTime 0.510\tData 0.236\tLoss 2.9715\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [28][21/29]\tTime 0.486\tData 0.218\tLoss 2.8616\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.033\tData 0.957\tLoss 2.2539\tAcc@1 76.5625\tAcc@5 100.0000\n"," * prec@1 56.811 prec@5 100.000\n"," * prec@1 56.811 prec@5 100.000\n"," * prec@1 56.478 prec@5 100.000\n"," * prec@1 56.811 prec@5 100.000\n"," * prec@1 57.143 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [29][1/29]\tTime 1.280\tData 0.919\tLoss 2.5573\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [29][11/29]\tTime 0.534\tData 0.260\tLoss 3.2291\tAcc@1 67.1875\tAcc@5 100.0000\n","Epoch: [29][21/29]\tTime 0.497\tData 0.226\tLoss 3.0715\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.067\tData 0.986\tLoss 2.4581\tAcc@1 78.1250\tAcc@5 100.0000\n"," * prec@1 56.478 prec@5 100.000\n"," * prec@1 54.817 prec@5 100.000\n"," * prec@1 55.150 prec@5 100.000\n"," * prec@1 53.821 prec@5 100.000\n"," * prec@1 50.498 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [30][1/29]\tTime 1.164\tData 0.877\tLoss 2.3795\tAcc@1 84.3750\tAcc@5 100.0000\n","Epoch: [30][11/29]\tTime 0.514\tData 0.248\tLoss 2.8272\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [30][21/29]\tTime 0.487\tData 0.219\tLoss 2.6174\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.020\tData 0.950\tLoss 3.9775\tAcc@1 48.4375\tAcc@5 100.0000\n"," * prec@1 63.787 prec@5 100.000\n"," * prec@1 63.787 prec@5 100.000\n"," * prec@1 64.784 prec@5 100.000\n"," * prec@1 63.455 prec@5 100.000\n"," * prec@1 63.787 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_014.pth.tar'\n","Epoch: [31][1/29]\tTime 1.186\tData 0.867\tLoss 2.5749\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [31][11/29]\tTime 0.532\tData 0.250\tLoss 2.3872\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [31][21/29]\tTime 0.490\tData 0.213\tLoss 3.0840\tAcc@1 64.0625\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.052\tData 0.966\tLoss 3.9485\tAcc@1 48.4375\tAcc@5 100.0000\n"," * prec@1 65.449 prec@5 100.000\n"," * prec@1 65.449 prec@5 100.000\n"," * prec@1 65.116 prec@5 100.000\n"," * prec@1 65.116 prec@5 100.000\n"," * prec@1 66.113 prec@5 100.000\n","Best var_prec1 66.11295706409949\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_031.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_031.pth.tar'\n","Epoch: [32][1/29]\tTime 1.185\tData 0.872\tLoss 2.7658\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [32][11/29]\tTime 0.550\tData 0.275\tLoss 2.3014\tAcc@1 82.8125\tAcc@5 100.0000\n","Epoch: [32][21/29]\tTime 0.528\tData 0.246\tLoss 2.0807\tAcc@1 85.9375\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.057\tData 0.986\tLoss 4.3773\tAcc@1 43.7500\tAcc@5 100.0000\n"," * prec@1 64.784 prec@5 100.000\n"," * prec@1 66.445 prec@5 100.000\n"," * prec@1 65.116 prec@5 100.000\n"," * prec@1 65.116 prec@5 100.000\n"," * prec@1 65.781 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_031.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_031.pth.tar'\n","Epoch: [33][1/29]\tTime 1.178\tData 0.886\tLoss 2.1105\tAcc@1 89.0625\tAcc@5 100.0000\n","Epoch: [33][11/29]\tTime 0.518\tData 0.249\tLoss 3.0937\tAcc@1 65.6250\tAcc@5 100.0000\n","Epoch: [33][21/29]\tTime 0.492\tData 0.221\tLoss 3.4368\tAcc@1 64.0625\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.070\tData 0.979\tLoss 4.1663\tAcc@1 48.4375\tAcc@5 100.0000\n"," * prec@1 66.113 prec@5 100.000\n"," * prec@1 65.449 prec@5 100.000\n"," * prec@1 66.777 prec@5 100.000\n"," * prec@1 66.113 prec@5 100.000\n"," * prec@1 67.774 prec@5 100.000\n","Best var_prec1 67.77408675893993\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_033.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_033.pth.tar'\n","Epoch: [34][1/29]\tTime 1.180\tData 0.925\tLoss 3.0533\tAcc@1 67.1875\tAcc@5 100.0000\n","Epoch: [34][11/29]\tTime 0.554\tData 0.274\tLoss 2.7292\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [34][21/29]\tTime 0.521\tData 0.237\tLoss 2.6042\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.040\tData 0.971\tLoss 3.6769\tAcc@1 54.6875\tAcc@5 100.0000\n"," * prec@1 65.449 prec@5 100.000\n"," * prec@1 64.120 prec@5 100.000\n"," * prec@1 64.120 prec@5 100.000\n"," * prec@1 64.784 prec@5 100.000\n"," * prec@1 65.781 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_033.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_033.pth.tar'\n","Epoch: [35][1/29]\tTime 1.130\tData 0.854\tLoss 2.7622\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [35][11/29]\tTime 0.515\tData 0.247\tLoss 3.0268\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [35][21/29]\tTime 0.490\tData 0.218\tLoss 2.5815\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.041\tData 0.950\tLoss 3.9977\tAcc@1 53.1250\tAcc@5 100.0000\n"," * prec@1 65.449 prec@5 100.000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 67.442 prec@5 100.000\n"," * prec@1 66.777 prec@5 100.000\n"," * prec@1 67.442 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_033.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_033.pth.tar'\n","Epoch: [36][1/29]\tTime 1.211\tData 0.865\tLoss 2.7042\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [36][11/29]\tTime 0.507\tData 0.233\tLoss 2.4331\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [36][21/29]\tTime 0.477\tData 0.212\tLoss 2.8077\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.054\tData 0.984\tLoss 3.9025\tAcc@1 53.1250\tAcc@5 100.0000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 67.110 prec@5 100.000\n"," * prec@1 67.110 prec@5 100.000\n"," * prec@1 66.445 prec@5 100.000\n"," * prec@1 66.777 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_033.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_033.pth.tar'\n","Epoch: [37][1/29]\tTime 1.154\tData 0.902\tLoss 2.3899\tAcc@1 84.3750\tAcc@5 100.0000\n","Epoch: [37][11/29]\tTime 0.519\tData 0.258\tLoss 3.4071\tAcc@1 67.1875\tAcc@5 100.0000\n","Epoch: [37][21/29]\tTime 0.494\tData 0.225\tLoss 2.0998\tAcc@1 85.9375\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.050\tData 0.978\tLoss 4.1599\tAcc@1 46.8750\tAcc@5 100.0000\n"," * prec@1 65.781 prec@5 100.000\n"," * prec@1 66.113 prec@5 100.000\n"," * prec@1 65.781 prec@5 100.000\n"," * prec@1 65.449 prec@5 100.000\n"," * prec@1 64.784 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_033.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_033.pth.tar'\n","Epoch: [38][1/29]\tTime 1.190\tData 0.900\tLoss 2.8128\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [38][11/29]\tTime 0.517\tData 0.252\tLoss 2.4902\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [38][21/29]\tTime 0.496\tData 0.229\tLoss 2.7680\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.028\tData 0.956\tLoss 5.3611\tAcc@1 39.0625\tAcc@5 100.0000\n"," * prec@1 63.123 prec@5 100.000\n"," * prec@1 64.784 prec@5 100.000\n"," * prec@1 64.452 prec@5 100.000\n"," * prec@1 63.123 prec@5 100.000\n"," * prec@1 63.455 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_033.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_033.pth.tar'\n","Epoch: [39][1/29]\tTime 1.208\tData 0.957\tLoss 2.8961\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [39][11/29]\tTime 0.523\tData 0.263\tLoss 2.5980\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [39][21/29]\tTime 0.493\tData 0.224\tLoss 2.3300\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.137\tData 1.021\tLoss 4.6091\tAcc@1 45.3125\tAcc@5 100.0000\n"," * prec@1 65.449 prec@5 100.000\n"," * prec@1 66.113 prec@5 100.000\n"," * prec@1 65.449 prec@5 100.000\n"," * prec@1 65.449 prec@5 100.000\n"," * prec@1 67.442 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_033.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_033.pth.tar'\n","Epoch: [40][1/29]\tTime 1.135\tData 0.886\tLoss 2.4659\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [40][11/29]\tTime 0.521\tData 0.264\tLoss 2.4375\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [40][21/29]\tTime 0.501\tData 0.237\tLoss 2.4962\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.085\tData 1.013\tLoss 3.9456\tAcc@1 51.5625\tAcc@5 100.0000\n"," * prec@1 66.777 prec@5 100.000\n"," * prec@1 69.767 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 67.442 prec@5 100.000\n"," * prec@1 68.439 prec@5 100.000\n","Best var_prec1 68.43853871291658\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","Epoch: [41][1/29]\tTime 1.288\tData 0.962\tLoss 2.4912\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [41][11/29]\tTime 0.543\tData 0.256\tLoss 2.6256\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [41][21/29]\tTime 0.518\tData 0.238\tLoss 2.4082\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.054\tData 0.983\tLoss 4.3676\tAcc@1 48.4375\tAcc@5 100.0000\n"," * prec@1 65.449 prec@5 100.000\n"," * prec@1 65.781 prec@5 100.000\n"," * prec@1 66.113 prec@5 100.000\n"," * prec@1 65.781 prec@5 100.000\n"," * prec@1 65.781 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","Epoch: [42][1/29]\tTime 1.241\tData 0.948\tLoss 2.6564\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [42][11/29]\tTime 0.544\tData 0.280\tLoss 2.9512\tAcc@1 64.0625\tAcc@5 100.0000\n","Epoch: [42][21/29]\tTime 0.507\tData 0.237\tLoss 2.4044\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.090\tData 0.987\tLoss 4.4220\tAcc@1 46.8750\tAcc@5 100.0000\n"," * prec@1 66.777 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 66.113 prec@5 100.000\n"," * prec@1 66.445 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","Epoch: [43][1/29]\tTime 1.210\tData 0.869\tLoss 2.6571\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [43][11/29]\tTime 0.538\tData 0.271\tLoss 1.9713\tAcc@1 82.8125\tAcc@5 100.0000\n","Epoch: [43][21/29]\tTime 0.500\tData 0.236\tLoss 2.4987\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.027\tData 0.950\tLoss 4.3107\tAcc@1 50.0000\tAcc@5 100.0000\n"," * prec@1 65.116 prec@5 100.000\n"," * prec@1 65.449 prec@5 100.000\n"," * prec@1 65.116 prec@5 100.000\n"," * prec@1 65.116 prec@5 100.000\n"," * prec@1 65.116 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","Epoch: [44][1/29]\tTime 1.152\tData 0.847\tLoss 2.5564\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [44][11/29]\tTime 0.508\tData 0.241\tLoss 2.8401\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [44][21/29]\tTime 0.485\tData 0.224\tLoss 2.7472\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.038\tData 0.952\tLoss 4.2080\tAcc@1 51.5625\tAcc@5 100.0000\n"," * prec@1 65.116 prec@5 100.000\n"," * prec@1 65.781 prec@5 100.000\n"," * prec@1 65.781 prec@5 100.000\n"," * prec@1 64.452 prec@5 100.000\n"," * prec@1 64.452 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","Epoch: [45][1/29]\tTime 1.207\tData 0.933\tLoss 2.1168\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [45][11/29]\tTime 0.530\tData 0.262\tLoss 2.2590\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [45][21/29]\tTime 0.498\tData 0.234\tLoss 2.6459\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.027\tData 0.947\tLoss 3.6375\tAcc@1 54.6875\tAcc@5 100.0000\n"," * prec@1 67.110 prec@5 100.000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 67.110 prec@5 100.000\n"," * prec@1 67.442 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","Epoch: [46][1/29]\tTime 1.145\tData 0.851\tLoss 2.5414\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [46][11/29]\tTime 0.510\tData 0.239\tLoss 2.7707\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [46][21/29]\tTime 0.490\tData 0.213\tLoss 2.4050\tAcc@1 79.6875\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.083\tData 1.004\tLoss 4.9105\tAcc@1 43.7500\tAcc@5 100.0000\n"," * prec@1 65.116 prec@5 100.000\n"," * prec@1 65.781 prec@5 100.000\n"," * prec@1 65.116 prec@5 100.000\n"," * prec@1 66.113 prec@5 100.000\n"," * prec@1 65.781 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","Epoch: [47][1/29]\tTime 1.116\tData 0.839\tLoss 2.5025\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [47][11/29]\tTime 0.525\tData 0.259\tLoss 2.4391\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [47][21/29]\tTime 0.497\tData 0.236\tLoss 2.6788\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.045\tData 0.960\tLoss 4.4369\tAcc@1 46.8750\tAcc@5 100.0000\n"," * prec@1 66.113 prec@5 100.000\n"," * prec@1 67.442 prec@5 100.000\n"," * prec@1 68.106 prec@5 100.000\n"," * prec@1 66.777 prec@5 100.000\n"," * prec@1 67.110 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","Epoch: [48][1/29]\tTime 1.176\tData 0.895\tLoss 2.5440\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [48][11/29]\tTime 0.504\tData 0.243\tLoss 2.7565\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [48][21/29]\tTime 0.488\tData 0.224\tLoss 2.4900\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.025\tData 0.956\tLoss 3.7440\tAcc@1 53.1250\tAcc@5 100.0000\n"," * prec@1 66.113 prec@5 100.000\n"," * prec@1 67.442 prec@5 100.000\n"," * prec@1 66.445 prec@5 100.000\n"," * prec@1 66.113 prec@5 100.000\n"," * prec@1 66.445 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","Epoch: [49][1/29]\tTime 1.209\tData 0.871\tLoss 2.6532\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [49][11/29]\tTime 0.531\tData 0.252\tLoss 2.9455\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [49][21/29]\tTime 0.500\tData 0.228\tLoss 2.8618\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.056\tData 0.986\tLoss 3.3589\tAcc@1 60.9375\tAcc@5 100.0000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 69.103 prec@5 100.000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 67.774 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","Epoch: [50][1/29]\tTime 1.191\tData 0.859\tLoss 2.7185\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [50][11/29]\tTime 0.495\tData 0.224\tLoss 2.4733\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [50][21/29]\tTime 0.475\tData 0.207\tLoss 2.7516\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.026\tData 0.957\tLoss 3.8625\tAcc@1 54.6875\tAcc@5 100.0000\n"," * prec@1 68.106 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n"," * prec@1 67.442 prec@5 100.000\n"," * prec@1 67.442 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","Epoch: [51][1/29]\tTime 1.166\tData 0.886\tLoss 2.7945\tAcc@1 67.1875\tAcc@5 100.0000\n","Epoch: [51][11/29]\tTime 0.518\tData 0.237\tLoss 2.5335\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [51][21/29]\tTime 0.492\tData 0.216\tLoss 2.7847\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.051\tData 0.943\tLoss 4.2571\tAcc@1 53.1250\tAcc@5 100.0000\n"," * prec@1 64.452 prec@5 100.000\n"," * prec@1 65.116 prec@5 100.000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 67.442 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","Epoch: [52][1/29]\tTime 1.190\tData 0.904\tLoss 2.8375\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [52][11/29]\tTime 0.527\tData 0.255\tLoss 2.2817\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [52][21/29]\tTime 0.485\tData 0.217\tLoss 2.8656\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.017\tData 0.944\tLoss 2.8072\tAcc@1 68.7500\tAcc@5 100.0000\n"," * prec@1 66.777 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 69.103 prec@5 100.000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 67.774 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","Epoch: [53][1/29]\tTime 1.144\tData 0.824\tLoss 2.5870\tAcc@1 79.6875\tAcc@5 100.0000\n","Epoch: [53][11/29]\tTime 0.514\tData 0.253\tLoss 2.2241\tAcc@1 79.6875\tAcc@5 100.0000\n","Epoch: [53][21/29]\tTime 0.499\tData 0.237\tLoss 2.4070\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.010\tData 0.939\tLoss 3.2274\tAcc@1 60.9375\tAcc@5 100.0000\n"," * prec@1 65.781 prec@5 100.000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 66.113 prec@5 100.000\n"," * prec@1 66.113 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_040.pth.tar'\n","Epoch: [54][1/29]\tTime 1.199\tData 0.886\tLoss 2.7973\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [54][11/29]\tTime 0.496\tData 0.215\tLoss 2.7011\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [54][21/29]\tTime 0.472\tData 0.199\tLoss 3.1945\tAcc@1 64.0625\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.007\tData 0.937\tLoss 4.0392\tAcc@1 62.5000\tAcc@5 100.0000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n","Best var_prec1 71.09634678229145\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [55][1/29]\tTime 1.204\tData 0.910\tLoss 2.6014\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [55][11/29]\tTime 0.546\tData 0.263\tLoss 2.4067\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [55][21/29]\tTime 0.514\tData 0.227\tLoss 3.2768\tAcc@1 59.3750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.057\tData 0.988\tLoss 4.2528\tAcc@1 50.0000\tAcc@5 100.0000\n"," * prec@1 65.781 prec@5 100.000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 68.106 prec@5 100.000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [56][1/29]\tTime 1.195\tData 0.840\tLoss 2.1642\tAcc@1 84.3750\tAcc@5 100.0000\n","Epoch: [56][11/29]\tTime 0.529\tData 0.260\tLoss 2.7919\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [56][21/29]\tTime 0.484\tData 0.216\tLoss 2.5029\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.052\tData 0.973\tLoss 4.2337\tAcc@1 51.5625\tAcc@5 100.0000\n"," * prec@1 66.113 prec@5 100.000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 67.442 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [57][1/29]\tTime 1.126\tData 0.840\tLoss 2.6397\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [57][11/29]\tTime 0.523\tData 0.256\tLoss 2.9751\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [57][21/29]\tTime 0.490\tData 0.222\tLoss 2.8349\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.044\tData 0.955\tLoss 3.8111\tAcc@1 59.3750\tAcc@5 100.0000\n"," * prec@1 67.110 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 68.106 prec@5 100.000\n"," * prec@1 69.103 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [58][1/29]\tTime 1.177\tData 0.874\tLoss 2.8735\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [58][11/29]\tTime 0.525\tData 0.263\tLoss 2.5499\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [58][21/29]\tTime 0.483\tData 0.222\tLoss 4.1429\tAcc@1 53.1250\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.034\tData 0.957\tLoss 4.1384\tAcc@1 56.2500\tAcc@5 100.0000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [59][1/29]\tTime 1.208\tData 0.912\tLoss 2.4688\tAcc@1 79.6875\tAcc@5 100.0000\n","Epoch: [59][11/29]\tTime 0.518\tData 0.246\tLoss 2.7650\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [59][21/29]\tTime 0.488\tData 0.219\tLoss 2.6080\tAcc@1 82.8125\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.051\tData 0.947\tLoss 3.3668\tAcc@1 62.5000\tAcc@5 100.0000\n"," * prec@1 67.110 prec@5 100.000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 68.106 prec@5 100.000\n"," * prec@1 68.439 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [60][1/29]\tTime 1.113\tData 0.845\tLoss 2.6567\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [60][11/29]\tTime 0.532\tData 0.275\tLoss 2.7492\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [60][21/29]\tTime 0.501\tData 0.239\tLoss 2.3688\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.003\tData 0.929\tLoss 3.8505\tAcc@1 59.3750\tAcc@5 100.0000\n"," * prec@1 67.110 prec@5 100.000\n"," * prec@1 69.103 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 69.103 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [61][1/29]\tTime 1.128\tData 0.864\tLoss 3.1149\tAcc@1 60.9375\tAcc@5 100.0000\n","Epoch: [61][11/29]\tTime 0.515\tData 0.255\tLoss 2.1793\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [61][21/29]\tTime 0.496\tData 0.238\tLoss 2.6118\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.049\tData 0.956\tLoss 4.1362\tAcc@1 54.6875\tAcc@5 100.0000\n"," * prec@1 67.110 prec@5 100.000\n"," * prec@1 69.103 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [62][1/29]\tTime 1.124\tData 0.816\tLoss 2.5214\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [62][11/29]\tTime 0.521\tData 0.242\tLoss 2.3459\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [62][21/29]\tTime 0.499\tData 0.229\tLoss 2.5972\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.031\tData 0.953\tLoss 3.9265\tAcc@1 56.2500\tAcc@5 100.0000\n"," * prec@1 66.445 prec@5 100.000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [63][1/29]\tTime 1.168\tData 0.887\tLoss 2.7123\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [63][11/29]\tTime 0.524\tData 0.255\tLoss 2.3515\tAcc@1 79.6875\tAcc@5 100.0000\n","Epoch: [63][21/29]\tTime 0.495\tData 0.226\tLoss 2.3187\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.048\tData 0.967\tLoss 3.8921\tAcc@1 56.2500\tAcc@5 100.0000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 68.106 prec@5 100.000\n"," * prec@1 68.106 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [64][1/29]\tTime 1.117\tData 0.847\tLoss 2.9521\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [64][11/29]\tTime 0.501\tData 0.222\tLoss 2.8999\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [64][21/29]\tTime 0.489\tData 0.215\tLoss 2.6502\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.022\tData 0.953\tLoss 3.7211\tAcc@1 60.9375\tAcc@5 100.0000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n"," * prec@1 69.103 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [65][1/29]\tTime 1.231\tData 0.897\tLoss 2.0656\tAcc@1 85.9375\tAcc@5 100.0000\n","Epoch: [65][11/29]\tTime 0.525\tData 0.246\tLoss 2.7385\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [65][21/29]\tTime 0.483\tData 0.212\tLoss 2.8944\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.058\tData 0.968\tLoss 3.7121\tAcc@1 59.3750\tAcc@5 100.0000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 69.103 prec@5 100.000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [66][1/29]\tTime 1.234\tData 0.896\tLoss 2.7268\tAcc@1 65.6250\tAcc@5 100.0000\n","Epoch: [66][11/29]\tTime 0.530\tData 0.251\tLoss 2.1426\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [66][21/29]\tTime 0.499\tData 0.227\tLoss 2.4200\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.036\tData 0.967\tLoss 3.8826\tAcc@1 56.2500\tAcc@5 100.0000\n"," * prec@1 67.442 prec@5 100.000\n"," * prec@1 68.106 prec@5 100.000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 69.103 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [67][1/29]\tTime 1.164\tData 0.861\tLoss 2.7269\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [67][11/29]\tTime 0.515\tData 0.244\tLoss 2.3559\tAcc@1 79.6875\tAcc@5 100.0000\n","Epoch: [67][21/29]\tTime 0.502\tData 0.232\tLoss 2.5787\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.027\tData 0.935\tLoss 3.7167\tAcc@1 60.9375\tAcc@5 100.0000\n"," * prec@1 68.106 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 69.767 prec@5 100.000\n"," * prec@1 69.103 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [68][1/29]\tTime 1.229\tData 0.881\tLoss 2.6130\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [68][11/29]\tTime 0.527\tData 0.247\tLoss 2.4475\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [68][21/29]\tTime 0.493\tData 0.223\tLoss 2.6338\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.070\tData 0.965\tLoss 3.9158\tAcc@1 57.8125\tAcc@5 100.0000\n"," * prec@1 67.442 prec@5 100.000\n"," * prec@1 69.103 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [69][1/29]\tTime 1.142\tData 0.846\tLoss 2.2259\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [69][11/29]\tTime 0.528\tData 0.261\tLoss 2.2382\tAcc@1 79.6875\tAcc@5 100.0000\n","Epoch: [69][21/29]\tTime 0.494\tData 0.233\tLoss 2.6837\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.001\tData 0.932\tLoss 3.8506\tAcc@1 57.8125\tAcc@5 100.0000\n"," * prec@1 66.777 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 69.767 prec@5 100.000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [70][1/29]\tTime 1.174\tData 0.877\tLoss 2.5361\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [70][11/29]\tTime 0.533\tData 0.261\tLoss 2.7176\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [70][21/29]\tTime 0.489\tData 0.216\tLoss 2.3629\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.075\tData 0.986\tLoss 3.9783\tAcc@1 56.2500\tAcc@5 100.0000\n"," * prec@1 66.777 prec@5 100.000\n"," * prec@1 69.767 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [71][1/29]\tTime 1.161\tData 0.915\tLoss 2.3795\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [71][11/29]\tTime 0.510\tData 0.235\tLoss 2.8165\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [71][21/29]\tTime 0.481\tData 0.210\tLoss 2.2609\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.003\tData 0.934\tLoss 3.9459\tAcc@1 57.8125\tAcc@5 100.0000\n"," * prec@1 67.110 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n"," * prec@1 69.767 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [72][1/29]\tTime 1.180\tData 0.845\tLoss 3.1156\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [72][11/29]\tTime 0.523\tData 0.243\tLoss 2.7385\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [72][21/29]\tTime 0.485\tData 0.213\tLoss 2.4905\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.075\tData 0.967\tLoss 3.8077\tAcc@1 60.9375\tAcc@5 100.0000\n"," * prec@1 67.442 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 69.767 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [73][1/29]\tTime 1.191\tData 0.864\tLoss 1.9572\tAcc@1 82.8125\tAcc@5 100.0000\n","Epoch: [73][11/29]\tTime 0.525\tData 0.262\tLoss 2.0875\tAcc@1 82.8125\tAcc@5 100.0000\n","Epoch: [73][21/29]\tTime 0.494\tData 0.234\tLoss 2.6103\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.047\tData 0.978\tLoss 3.6213\tAcc@1 65.6250\tAcc@5 100.0000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [74][1/29]\tTime 1.239\tData 0.947\tLoss 2.7351\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [74][11/29]\tTime 0.529\tData 0.262\tLoss 2.5715\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [74][21/29]\tTime 0.494\tData 0.225\tLoss 3.4270\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.040\tData 0.954\tLoss 3.3301\tAcc@1 65.6250\tAcc@5 100.0000\n"," * prec@1 67.442 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n"," * prec@1 69.767 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [75][1/29]\tTime 1.150\tData 0.869\tLoss 2.1253\tAcc@1 87.5000\tAcc@5 100.0000\n","Epoch: [75][11/29]\tTime 0.532\tData 0.255\tLoss 2.2656\tAcc@1 79.6875\tAcc@5 100.0000\n","Epoch: [75][21/29]\tTime 0.501\tData 0.227\tLoss 2.3406\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.070\tData 0.969\tLoss 3.7690\tAcc@1 62.5000\tAcc@5 100.0000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 69.767 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [76][1/29]\tTime 1.114\tData 0.850\tLoss 2.5881\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [76][11/29]\tTime 0.526\tData 0.258\tLoss 2.4482\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [76][21/29]\tTime 0.495\tData 0.227\tLoss 1.9994\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.048\tData 0.949\tLoss 3.8628\tAcc@1 60.9375\tAcc@5 100.0000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 69.103 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [77][1/29]\tTime 1.236\tData 0.900\tLoss 2.2108\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [77][11/29]\tTime 0.517\tData 0.242\tLoss 2.5644\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [77][21/29]\tTime 0.488\tData 0.217\tLoss 1.9408\tAcc@1 84.3750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.009\tData 0.939\tLoss 3.8147\tAcc@1 62.5000\tAcc@5 100.0000\n"," * prec@1 68.106 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [78][1/29]\tTime 1.104\tData 0.817\tLoss 2.9963\tAcc@1 75.0000\tAcc@5 100.0000\n","Epoch: [78][11/29]\tTime 0.505\tData 0.228\tLoss 2.3448\tAcc@1 79.6875\tAcc@5 100.0000\n","Epoch: [78][21/29]\tTime 0.491\tData 0.218\tLoss 2.6286\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.020\tData 0.950\tLoss 3.6250\tAcc@1 64.0625\tAcc@5 100.0000\n"," * prec@1 67.774 prec@5 100.000\n"," * prec@1 69.435 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [79][1/29]\tTime 1.215\tData 0.856\tLoss 2.8921\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [79][11/29]\tTime 0.490\tData 0.213\tLoss 2.0019\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [79][21/29]\tTime 0.475\tData 0.207\tLoss 2.3513\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.054\tData 0.954\tLoss 3.5200\tAcc@1 65.6250\tAcc@5 100.0000\n"," * prec@1 68.106 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [80][1/29]\tTime 1.223\tData 0.903\tLoss 2.4783\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [80][11/29]\tTime 0.535\tData 0.259\tLoss 3.0247\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [80][21/29]\tTime 0.495\tData 0.223\tLoss 2.6323\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.035\tData 0.965\tLoss 3.7547\tAcc@1 62.5000\tAcc@5 100.0000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_054.pth.tar'\n","Epoch: [81][1/29]\tTime 1.145\tData 0.899\tLoss 2.6114\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [81][11/29]\tTime 0.514\tData 0.242\tLoss 3.1268\tAcc@1 68.7500\tAcc@5 100.0000\n","Epoch: [81][21/29]\tTime 0.488\tData 0.216\tLoss 2.3804\tAcc@1 81.2500\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.060\tData 0.960\tLoss 3.7491\tAcc@1 64.0625\tAcc@5 100.0000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 71.429 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n"," * prec@1 71.429 prec@5 100.000\n","Best var_prec1 71.42857180877381\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","Epoch: [82][1/29]\tTime 1.207\tData 0.870\tLoss 3.0668\tAcc@1 65.6250\tAcc@5 100.0000\n","Epoch: [82][11/29]\tTime 0.509\tData 0.232\tLoss 2.2857\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [82][21/29]\tTime 0.502\tData 0.219\tLoss 2.7491\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.010\tData 0.940\tLoss 3.6902\tAcc@1 64.0625\tAcc@5 100.0000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","Epoch: [83][1/29]\tTime 1.175\tData 0.878\tLoss 2.4063\tAcc@1 84.3750\tAcc@5 100.0000\n","Epoch: [83][11/29]\tTime 0.512\tData 0.244\tLoss 2.6338\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [83][21/29]\tTime 0.481\tData 0.217\tLoss 2.6599\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.081\tData 0.983\tLoss 3.7728\tAcc@1 59.3750\tAcc@5 100.0000\n"," * prec@1 68.106 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 69.767 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","Epoch: [84][1/29]\tTime 1.251\tData 0.904\tLoss 2.5593\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [84][11/29]\tTime 0.526\tData 0.253\tLoss 2.9464\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [84][21/29]\tTime 0.490\tData 0.219\tLoss 3.0481\tAcc@1 71.8750\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.016\tData 0.923\tLoss 3.7558\tAcc@1 62.5000\tAcc@5 100.0000\n"," * prec@1 67.110 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","Epoch: [85][1/29]\tTime 1.140\tData 0.886\tLoss 2.6740\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [85][11/29]\tTime 0.522\tData 0.258\tLoss 3.0659\tAcc@1 67.1875\tAcc@5 100.0000\n","Epoch: [85][21/29]\tTime 0.493\tData 0.231\tLoss 2.8256\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.028\tData 0.952\tLoss 3.5820\tAcc@1 64.0625\tAcc@5 100.0000\n"," * prec@1 68.439 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 72.093 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","Epoch: [86][1/29]\tTime 1.235\tData 0.899\tLoss 2.3097\tAcc@1 84.3750\tAcc@5 100.0000\n","Epoch: [86][11/29]\tTime 0.514\tData 0.238\tLoss 2.8010\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [86][21/29]\tTime 0.481\tData 0.211\tLoss 2.8918\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.059\tData 0.944\tLoss 3.4753\tAcc@1 67.1875\tAcc@5 100.0000\n"," * prec@1 68.106 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","Epoch: [87][1/29]\tTime 1.128\tData 0.850\tLoss 2.0549\tAcc@1 84.3750\tAcc@5 100.0000\n","Epoch: [87][11/29]\tTime 0.529\tData 0.263\tLoss 2.2170\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [87][21/29]\tTime 0.486\tData 0.220\tLoss 2.6392\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.028\tData 0.955\tLoss 3.7177\tAcc@1 65.6250\tAcc@5 100.0000\n"," * prec@1 67.442 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","Epoch: [88][1/29]\tTime 1.223\tData 0.879\tLoss 2.6129\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [88][11/29]\tTime 0.515\tData 0.241\tLoss 2.2522\tAcc@1 78.1250\tAcc@5 100.0000\n","Epoch: [88][21/29]\tTime 0.485\tData 0.214\tLoss 2.8730\tAcc@1 73.4375\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.063\tData 0.983\tLoss 3.7035\tAcc@1 60.9375\tAcc@5 100.0000\n"," * prec@1 68.771 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n"," * prec@1 71.761 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 70.432 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","Epoch: [89][1/29]\tTime 1.186\tData 0.870\tLoss 2.4114\tAcc@1 76.5625\tAcc@5 100.0000\n","Epoch: [89][11/29]\tTime 0.526\tData 0.251\tLoss 1.9521\tAcc@1 84.3750\tAcc@5 100.0000\n","Epoch: [89][21/29]\tTime 0.496\tData 0.228\tLoss 2.4959\tAcc@1 70.3125\tAcc@5 100.0000\n","Epoch: [1/5]\tTime 1.042\tData 0.947\tLoss 3.4728\tAcc@1 65.6250\tAcc@5 100.0000\n"," * prec@1 69.103 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n","Namespace(arch='msdnet', base=4, batch_size=64, bnFactor=[1, 2, 4, 4], bottleneck=True, data='ImageNet', data_root='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1', decay_rate=0.1, epochs=90, evalmode=None, evaluate_from=None, gpu='0,1,2,3', grFactor=[1, 2, 4, 4], growthRate=16, lr=0.1, lr_type='multistep', momentum=0.9, nBlocks=5, nChannels=32, nScales=4, num_classes=2, optimizer='sgd', print_freq=10, prune='max', reduction=0.5, resume=False, save='/content/gdrive/MyDrive/MSDNet-PyTorch/weights/', seed=0, splits=['train', 'val'], start_epoch=0, step=4, stepmode='even', use_valid=False, weight_decay=0.0001, workers=2)\n","=> saving checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","=> saved checkpoint '/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/checkpoint_081.pth.tar'\n","Best val_prec1: 71.4286 at epoch 81\n","********** Final prediction results **********\n","Epoch: [1/5]\tTime 1.082\tData 0.993\tLoss 3.4728\tAcc@1 65.6250\tAcc@5 100.0000\n"," * prec@1 69.103 prec@5 100.000\n"," * prec@1 70.764 prec@5 100.000\n"," * prec@1 70.100 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n"," * prec@1 71.096 prec@5 100.000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2zFqX3z-4W1E"},"source":["import torch.nn as nn\n","import torch\n","import math\n","import pdb\n","\n","class ConvBasic(nn.Module):\n","    def __init__(self, nIn, nOut, kernel=3, stride=1,\n","                 padding=1):\n","        super(ConvBasic, self).__init__()\n","        self.net = nn.Sequential(\n","            nn.Conv2d(nIn, nOut, kernel_size=kernel, stride=stride,\n","                      padding=padding, bias=False),\n","            nn.BatchNorm2d(nOut),\n","            nn.ReLU(True)\n","        )\n","\n","    def forward(self, x):\n","        return self.net(x)\n","\n","\n","class ConvBN(nn.Module):\n","    def __init__(self, nIn, nOut, type: str, bottleneck,\n","                 bnWidth):\n","        \"\"\"\n","        a basic conv in MSDNet, two type\n","        :param nIn:\n","        :param nOut:\n","        :param type: normal or down\n","        :param bottleneck: use bottlenet or not\n","        :param bnWidth: bottleneck factor\n","        \"\"\"\n","        super(ConvBN, self).__init__()\n","        layer = []\n","        nInner = nIn\n","        if bottleneck is True:\n","            nInner = min(nInner, bnWidth * nOut)\n","            layer.append(nn.Conv2d(\n","                nIn, nInner, kernel_size=1, stride=1, padding=0, bias=False))\n","            layer.append(nn.BatchNorm2d(nInner))\n","            layer.append(nn.ReLU(True))\n","\n","        if type == 'normal':\n","            layer.append(nn.Conv2d(nInner, nOut, kernel_size=3,\n","                                   stride=1, padding=1, bias=False))\n","        elif type == 'down':\n","            layer.append(nn.Conv2d(nInner, nOut, kernel_size=3,\n","                                   stride=2, padding=1, bias=False))\n","        else:\n","            raise ValueError\n","\n","        layer.append(nn.BatchNorm2d(nOut))\n","        layer.append(nn.ReLU(True))\n","\n","        self.net = nn.Sequential(*layer)\n","\n","    def forward(self, x):\n","\n","        return self.net(x)\n","\n","\n","class ConvDownNormal(nn.Module):\n","    def __init__(self, nIn1, nIn2, nOut, bottleneck, bnWidth1, bnWidth2):\n","        super(ConvDownNormal, self).__init__()\n","        self.conv_down = ConvBN(nIn1, nOut // 2, 'down',\n","                                bottleneck, bnWidth1)\n","        self.conv_normal = ConvBN(nIn2, nOut // 2, 'normal',\n","                                   bottleneck, bnWidth2)\n","\n","    def forward(self, x):\n","        res = [x[1],\n","               self.conv_down(x[0]),\n","               self.conv_normal(x[1])]\n","        return torch.cat(res, dim=1)\n","\n","\n","class ConvNormal(nn.Module):\n","    def __init__(self, nIn, nOut, bottleneck, bnWidth):\n","        super(ConvNormal, self).__init__()\n","        self.conv_normal = ConvBN(nIn, nOut, 'normal',\n","                                   bottleneck, bnWidth)\n","\n","    def forward(self, x):\n","        if not isinstance(x, list):\n","            x = [x]\n","        res = [x[0],\n","               self.conv_normal(x[0])]\n","\n","        return torch.cat(res, dim=1)\n","\n","class MSDNFirstLayer(nn.Module):\n","    def __init__(self, nIn, nOut, args):\n","        super(MSDNFirstLayer, self).__init__()\n","        self.layers = nn.ModuleList()\n","        if args.data.startswith('cifar'):\n","            self.layers.append(ConvBasic(nIn, nOut * args.grFactor[0],\n","                                         kernel=3, stride=1, padding=1))\n","        elif args.data == 'ImageNet':\n","            conv = nn.Sequential(\n","                    nn.Conv2d(nIn, nOut * args.grFactor[0], 7, 2, 3),\n","                    nn.BatchNorm2d(nOut * args.grFactor[0]),\n","                    nn.ReLU(inplace=True),\n","                    nn.MaxPool2d(3, 2, 1))\n","            self.layers.append(conv)\n","\n","        nIn = nOut * args.grFactor[0]\n","\n","        for i in range(1, args.nScales):\n","            self.layers.append(ConvBasic(nIn, nOut * args.grFactor[i],\n","                                         kernel=3, stride=2, padding=1))\n","            nIn = nOut * args.grFactor[i]\n","\n","    def forward(self, x):\n","        res = []\n","        for i in range(len(self.layers)):\n","            x = self.layers[i](x)\n","            res.append(x)\n","\n","        return res\n","\n","class MSDNLayer(nn.Module):\n","    def __init__(self, nIn, nOut, args, inScales=None, outScales=None):\n","        super(MSDNLayer, self).__init__()\n","        self.nIn = nIn\n","        self.nOut = nOut\n","        self.inScales = inScales if inScales is not None else args.nScales\n","        self.outScales = outScales if outScales is not None else args.nScales\n","\n","        self.nScales = args.nScales\n","        self.discard = self.inScales - self.outScales\n","\n","        self.offset = self.nScales - self.outScales\n","        self.layers = nn.ModuleList()\n","\n","        if self.discard > 0:\n","            nIn1 = nIn * args.grFactor[self.offset - 1]\n","            nIn2 = nIn * args.grFactor[self.offset]\n","            _nOut = nOut * args.grFactor[self.offset]\n","            self.layers.append(ConvDownNormal(nIn1, nIn2, _nOut, args.bottleneck,\n","                                              args.bnFactor[self.offset - 1],\n","                                              args.bnFactor[self.offset]))\n","        else:\n","            self.layers.append(ConvNormal(nIn * args.grFactor[self.offset],\n","                                          nOut * args.grFactor[self.offset],\n","                                          args.bottleneck,\n","                                          args.bnFactor[self.offset]))\n","\n","        for i in range(self.offset + 1, self.nScales):\n","            nIn1 = nIn * args.grFactor[i - 1]\n","            nIn2 = nIn * args.grFactor[i]\n","            _nOut = nOut * args.grFactor[i]\n","            self.layers.append(ConvDownNormal(nIn1, nIn2, _nOut, args.bottleneck,\n","                                              args.bnFactor[i - 1],\n","                                              args.bnFactor[i]))\n","\n","    def forward(self, x):\n","        if self.discard > 0:\n","            inp = []\n","            for i in range(1, self.outScales + 1):\n","                inp.append([x[i - 1], x[i]])\n","        else:\n","            inp = [[x[0]]]\n","            for i in range(1, self.outScales):\n","                inp.append([x[i - 1], x[i]])\n","\n","        res = []\n","        for i in range(self.outScales):\n","            res.append(self.layers[i](inp[i]))\n","\n","        return res\n","\n","\n","class ParallelModule(nn.Module):\n","    \"\"\"\n","    This module is similar to luatorch's Parallel Table\n","    input: N tensor\n","    network: N module\n","    output: N tensor\n","    \"\"\"\n","    def __init__(self, parallel_modules):\n","        super(ParallelModule, self).__init__()\n","        self.m = nn.ModuleList(parallel_modules)\n","\n","    def forward(self, x):\n","        res = []\n","        for i in range(len(x)):\n","            res.append(self.m[i](x[i]))\n","\n","        return res\n","\n","\n","class ClassifierModule(nn.Module):\n","    def __init__(self, m, channel, num_classes):\n","        super(ClassifierModule, self).__init__()\n","        self.m = m\n","        self.linear = nn.Linear(channel, num_classes)\n","\n","    def forward(self, x):\n","        res = self.m(x[-1])\n","        res = res.view(res.size(0), -1)\n","        return self.linear(res)\n","\n","class MSDNet(nn.Module):\n","    def __init__(self, args):\n","        super(MSDNet, self).__init__()\n","        self.blocks = nn.ModuleList()\n","        self.classifier = nn.ModuleList()\n","        self.nBlocks = args.nBlocks\n","        self.steps = [args.base]\n","        self.args = args\n","\n","        n_layers_all, n_layer_curr = args.base, 0\n","        for i in range(1, self.nBlocks):\n","            self.steps.append(args.step if args.stepmode == 'even'\n","                             else args.step * i + 1)\n","            n_layers_all += self.steps[-1]\n","\n","        print(\"building network of steps: \")\n","        print(self.steps, n_layers_all)\n","\n","        nIn = args.nChannels\n","        for i in range(self.nBlocks):\n","            print(' ********************** Block {} '\n","                  ' **********************'.format(i + 1))\n","            m, nIn = \\\n","                self._build_block(nIn, args, self.steps[i],\n","                                  n_layers_all, n_layer_curr)\n","            self.blocks.append(m)\n","            n_layer_curr += self.steps[i]\n","\n","            if args.data.startswith('cifar100'):\n","                self.classifier.append(\n","                    self._build_classifier_cifar(nIn * args.grFactor[-1], 100))\n","            elif args.data.startswith('cifar10'):\n","                self.classifier.append(\n","                    self._build_classifier_cifar(nIn * args.grFactor[-1], 10))\n","            elif args.data == 'ImageNet':\n","                self.classifier.append(\n","                    self._build_classifier_imagenet(nIn * args.grFactor[-1], 2))\n","            else:\n","                raise NotImplementedError\n","\n","        for m in self.blocks:\n","            if hasattr(m, '__iter__'):\n","                for _m in m:\n","                    self._init_weights(_m)\n","            else:\n","                self._init_weights(m)\n","\n","        for m in self.classifier:\n","            if hasattr(m, '__iter__'):\n","                for _m in m:\n","                    self._init_weights(_m)\n","            else:\n","                self._init_weights(m)\n","\n","    def _init_weights(self, m):\n","        if isinstance(m, nn.Conv2d):\n","            n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n","            m.weight.data.normal_(0, math.sqrt(2. / n))\n","        elif isinstance(m, nn.BatchNorm2d):\n","            m.weight.data.fill_(1)\n","            m.bias.data.zero_()\n","        elif isinstance(m, nn.Linear):\n","            m.bias.data.zero_()\n","\n","    def _build_block(self, nIn, args, step, n_layer_all, n_layer_curr):\n","\n","        layers = [MSDNFirstLayer(3, nIn, args)] \\\n","            if n_layer_curr == 0 else []\n","        for i in range(step):\n","            n_layer_curr += 1\n","            inScales = args.nScales\n","            outScales = args.nScales\n","            if args.prune == 'min':\n","                inScales = min(args.nScales, n_layer_all - n_layer_curr + 2)\n","                outScales = min(args.nScales, n_layer_all - n_layer_curr + 1)\n","            elif args.prune == 'max':\n","                interval = math.ceil(1.0 * n_layer_all / args.nScales)\n","                inScales = args.nScales - math.floor(1.0 * (max(0, n_layer_curr - 2)) / interval)\n","                outScales = args.nScales - math.floor(1.0 * (n_layer_curr - 1) / interval)\n","            else:\n","                raise ValueError\n","\n","            layers.append(MSDNLayer(nIn, args.growthRate, args, inScales, outScales))\n","            print('|\\t\\tinScales {} outScales {} inChannels {} outChannels {}\\t\\t|'.format(inScales, outScales, nIn, args.growthRate))\n","\n","            nIn += args.growthRate\n","            if args.prune == 'max' and inScales > outScales and \\\n","                    args.reduction > 0:\n","                offset = args.nScales - outScales\n","                layers.append(\n","                    self._build_transition(nIn, math.floor(1.0 * args.reduction * nIn),\n","                                           outScales, offset, args))\n","                _t = nIn\n","                nIn = math.floor(1.0 * args.reduction * nIn)\n","                print('|\\t\\tTransition layer inserted! (max), inChannels {}, outChannels {}\\t|'.format(_t, math.floor(1.0 * args.reduction * _t)))\n","            elif args.prune == 'min' and args.reduction > 0 and \\\n","                    ((n_layer_curr == math.floor(1.0 * n_layer_all / 3)) or\n","                     n_layer_curr == math.floor(2.0 * n_layer_all / 3)):\n","                offset = args.nScales - outScales\n","                layers.append(self._build_transition(nIn, math.floor(1.0 * args.reduction * nIn),\n","                                                     outScales, offset, args))\n","\n","                nIn = math.floor(1.0 * args.reduction * nIn)\n","                print('|\\t\\tTransition layer inserted! (min)\\t|')\n","            print(\"\")\n","\n","        return nn.Sequential(*layers), nIn\n","\n","    def _build_transition(self, nIn, nOut, outScales, offset, args):\n","        net = []\n","        for i in range(outScales):\n","            net.append(ConvBasic(nIn * args.grFactor[offset + i],\n","                                 nOut * args.grFactor[offset + i],\n","                                 kernel=1, stride=1, padding=0))\n","        return ParallelModule(net)\n","\n","    def _build_classifier_cifar(self, nIn, num_classes):\n","        interChannels1, interChannels2 = 128, 128\n","        conv = nn.Sequential(\n","            ConvBasic(nIn, interChannels1, kernel=3, stride=2, padding=1),\n","            ConvBasic(interChannels1, interChannels2, kernel=3, stride=2, padding=1),\n","            nn.AvgPool2d(2),\n","        )\n","        return ClassifierModule(conv, interChannels2, num_classes)\n","\n","    def _build_classifier_imagenet(self, nIn, num_classes):\n","        conv = nn.Sequential(\n","            ConvBasic(nIn, nIn, kernel=3, stride=2, padding=1),\n","            ConvBasic(nIn, nIn, kernel=3, stride=2, padding=1),\n","            nn.AvgPool2d(2)\n","        )\n","        return ClassifierModule(conv, nIn, num_classes)\n","\n","    def forward(self, x):\n","        res = []\n","        for i in range(self.nBlocks):\n","            x = self.blocks[i](x)\n","            res.append(self.classifier[i](x))\n","        return res\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yjo5x0j-itN2","executionInfo":{"status":"ok","timestamp":1621341960134,"user_tz":-180,"elapsed":2353,"user":{"displayName":"Cabdiraxmaan Yusuf","photoUrl":"","userId":"01857871583179459739"}},"outputId":"0eca8fe5-609a-4e6b-d4ee-a58f25aa986a"},"source":["class Args():\n","    def __init__(self):\n","      self.nBlocks=5\n","      self.nScales=4\n","      self.bottleneck=True\n","      self.base=4\n","      self.step=4\n","      self.growthRate=16\n","      self.grFactor=1,2,4,4\n","      self.stepmode='even'\n","      self.nChannels=32\n","      self.data='ImageNet'\n","      self.prune='max'\n","      self.bnFactor=1,2,4,4\n","      self.reduction=0.5\n","args=Args()\n","model = MSDNet(args)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["building network of steps: \n","[4, 4, 4, 4, 4] 20\n"," ********************** Block 1  **********************\n","|\t\tinScales 4 outScales 4 inChannels 32 outChannels 16\t\t|\n","\n","|\t\tinScales 4 outScales 4 inChannels 48 outChannels 16\t\t|\n","\n","|\t\tinScales 4 outScales 4 inChannels 64 outChannels 16\t\t|\n","\n","|\t\tinScales 4 outScales 4 inChannels 80 outChannels 16\t\t|\n","\n"," ********************** Block 2  **********************\n","|\t\tinScales 4 outScales 4 inChannels 96 outChannels 16\t\t|\n","\n","|\t\tinScales 4 outScales 3 inChannels 112 outChannels 16\t\t|\n","|\t\tTransition layer inserted! (max), inChannels 128, outChannels 64\t|\n","\n","|\t\tinScales 3 outScales 3 inChannels 64 outChannels 16\t\t|\n","\n","|\t\tinScales 3 outScales 3 inChannels 80 outChannels 16\t\t|\n","\n"," ********************** Block 3  **********************\n","|\t\tinScales 3 outScales 3 inChannels 96 outChannels 16\t\t|\n","\n","|\t\tinScales 3 outScales 3 inChannels 112 outChannels 16\t\t|\n","\n","|\t\tinScales 3 outScales 2 inChannels 128 outChannels 16\t\t|\n","|\t\tTransition layer inserted! (max), inChannels 144, outChannels 72\t|\n","\n","|\t\tinScales 2 outScales 2 inChannels 72 outChannels 16\t\t|\n","\n"," ********************** Block 4  **********************\n","|\t\tinScales 2 outScales 2 inChannels 88 outChannels 16\t\t|\n","\n","|\t\tinScales 2 outScales 2 inChannels 104 outChannels 16\t\t|\n","\n","|\t\tinScales 2 outScales 2 inChannels 120 outChannels 16\t\t|\n","\n","|\t\tinScales 2 outScales 1 inChannels 136 outChannels 16\t\t|\n","|\t\tTransition layer inserted! (max), inChannels 152, outChannels 76\t|\n","\n"," ********************** Block 5  **********************\n","|\t\tinScales 1 outScales 1 inChannels 76 outChannels 16\t\t|\n","\n","|\t\tinScales 1 outScales 1 inChannels 92 outChannels 16\t\t|\n","\n","|\t\tinScales 1 outScales 1 inChannels 108 outChannels 16\t\t|\n","\n","|\t\tinScales 1 outScales 1 inChannels 124 outChannels 16\t\t|\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"q5xBlI8kTiui","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621341981840,"user_tz":-180,"elapsed":14261,"user":{"displayName":"Cabdiraxmaan Yusuf","photoUrl":"","userId":"01857871583179459739"}},"outputId":"bf9a7e36-5724-480e-9878-73c4fdd83b75"},"source":["import torch\n","\n","checkpoint = torch.load('/content/gdrive/MyDrive/MSDNet-PyTorch/weights/save_models/model_best.pth.tar')\n","optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9, weight_decay=1e-4)\n","model.load_state_dict(checkpoint['state_dict'],strict=False)\n","optimizer.load_state_dict(checkpoint['optimizer'])\n","model.cpu()\n","model.eval()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["MSDNet(\n","  (blocks): ModuleList(\n","    (0): Sequential(\n","      (0): MSDNFirstLayer(\n","        (layers): ModuleList(\n","          (0): Sequential(\n","            (0): Conv2d(3, 32, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))\n","            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (2): ReLU(inplace=True)\n","            (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","          )\n","          (1): ConvBasic(\n","            (net): Sequential(\n","              (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (2): ReLU(inplace=True)\n","            )\n","          )\n","          (2): ConvBasic(\n","            (net): Sequential(\n","              (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (2): ReLU(inplace=True)\n","            )\n","          )\n","          (3): ConvBasic(\n","            (net): Sequential(\n","              (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (2): ReLU(inplace=True)\n","            )\n","          )\n","        )\n","      )\n","      (1): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (2): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (3): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (2): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (2): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(96, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (3): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (3): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (2): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (3): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (4): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(80, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(80, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(160, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (2): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(160, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (3): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","    )\n","    (1): Sequential(\n","      (0): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(96, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (2): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (3): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (1): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(112, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(224, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(224, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (2): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (2): ParallelModule(\n","        (m): ModuleList(\n","          (0): ConvBasic(\n","            (net): Sequential(\n","              (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (2): ReLU(inplace=True)\n","            )\n","          )\n","          (1): ConvBasic(\n","            (net): Sequential(\n","              (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (2): ReLU(inplace=True)\n","            )\n","          )\n","          (2): ConvBasic(\n","            (net): Sequential(\n","              (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (2): ReLU(inplace=True)\n","            )\n","          )\n","        )\n","      )\n","      (3): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (2): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (4): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(160, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(160, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (2): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","    )\n","    (2): Sequential(\n","      (0): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (2): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (1): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(224, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(224, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (2): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (2): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(64, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (3): ParallelModule(\n","        (m): ModuleList(\n","          (0): ConvBasic(\n","            (net): Sequential(\n","              (0): Conv2d(576, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (2): ReLU(inplace=True)\n","            )\n","          )\n","          (1): ConvBasic(\n","            (net): Sequential(\n","              (0): Conv2d(576, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (2): ReLU(inplace=True)\n","            )\n","          )\n","        )\n","      )\n","      (4): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","    )\n","    (3): Sequential(\n","      (0): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(352, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (1): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(416, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (2): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(480, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","          (1): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (3): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvDownNormal(\n","            (conv_down): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (4): ParallelModule(\n","        (m): ModuleList(\n","          (0): ConvBasic(\n","            (net): Sequential(\n","              (0): Conv2d(608, 304, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","              (1): BatchNorm2d(304, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","              (2): ReLU(inplace=True)\n","            )\n","          )\n","        )\n","      )\n","    )\n","    (4): Sequential(\n","      (0): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(304, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (1): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(368, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (2): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(432, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","      (3): MSDNLayer(\n","        (layers): ModuleList(\n","          (0): ConvNormal(\n","            (conv_normal): ConvBN(\n","              (net): Sequential(\n","                (0): Conv2d(496, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (2): ReLU(inplace=True)\n","                (3): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","                (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","                (5): ReLU(inplace=True)\n","              )\n","            )\n","          )\n","        )\n","      )\n","    )\n","  )\n","  (classifier): ModuleList(\n","    (0): ClassifierModule(\n","      (m): Sequential(\n","        (0): ConvBasic(\n","          (net): Sequential(\n","            (0): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (2): ReLU(inplace=True)\n","          )\n","        )\n","        (1): ConvBasic(\n","          (net): Sequential(\n","            (0): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (2): ReLU(inplace=True)\n","          )\n","        )\n","        (2): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","      )\n","      (linear): Linear(in_features=384, out_features=2, bias=True)\n","    )\n","    (1): ClassifierModule(\n","      (m): Sequential(\n","        (0): ConvBasic(\n","          (net): Sequential(\n","            (0): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (2): ReLU(inplace=True)\n","          )\n","        )\n","        (1): ConvBasic(\n","          (net): Sequential(\n","            (0): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (2): ReLU(inplace=True)\n","          )\n","        )\n","        (2): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","      )\n","      (linear): Linear(in_features=384, out_features=2, bias=True)\n","    )\n","    (2): ClassifierModule(\n","      (m): Sequential(\n","        (0): ConvBasic(\n","          (net): Sequential(\n","            (0): Conv2d(352, 352, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","            (1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (2): ReLU(inplace=True)\n","          )\n","        )\n","        (1): ConvBasic(\n","          (net): Sequential(\n","            (0): Conv2d(352, 352, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","            (1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (2): ReLU(inplace=True)\n","          )\n","        )\n","        (2): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","      )\n","      (linear): Linear(in_features=352, out_features=2, bias=True)\n","    )\n","    (3): ClassifierModule(\n","      (m): Sequential(\n","        (0): ConvBasic(\n","          (net): Sequential(\n","            (0): Conv2d(304, 304, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","            (1): BatchNorm2d(304, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (2): ReLU(inplace=True)\n","          )\n","        )\n","        (1): ConvBasic(\n","          (net): Sequential(\n","            (0): Conv2d(304, 304, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","            (1): BatchNorm2d(304, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (2): ReLU(inplace=True)\n","          )\n","        )\n","        (2): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","      )\n","      (linear): Linear(in_features=304, out_features=2, bias=True)\n","    )\n","    (4): ClassifierModule(\n","      (m): Sequential(\n","        (0): ConvBasic(\n","          (net): Sequential(\n","            (0): Conv2d(560, 560, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","            (1): BatchNorm2d(560, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (2): ReLU(inplace=True)\n","          )\n","        )\n","        (1): ConvBasic(\n","          (net): Sequential(\n","            (0): Conv2d(560, 560, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","            (1): BatchNorm2d(560, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","            (2): ReLU(inplace=True)\n","          )\n","        )\n","        (2): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","      )\n","      (linear): Linear(in_features=560, out_features=2, bias=True)\n","    )\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"IDe4QbeRVeLw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621342352320,"user_tz":-180,"elapsed":844,"user":{"displayName":"Cabdiraxmaan Yusuf","photoUrl":"","userId":"01857871583179459739"}},"outputId":"a5a2e721-fc96-43be-d174-0d92dab2b422"},"source":["import torch\n","import torch.nn as nn\n","from torchvision.transforms import transforms\n","import numpy as np\n","from torch.autograd import Variable\n","from torchvision.models import squeezenet1_1\n","import torch.functional as F\n","from io import open\n","import os\n","from PIL import Image\n","import pathlib\n","import glob\n","import cv2\n","\n","train_path='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1/train'\n","pred_path='/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1/val/normal'\n","root=pathlib.Path(train_path)\n","classes=sorted([j.name.split('/')[-1] for j in root.iterdir()])\n","classes=classes[1:]\n","print(classes)\n","\n","normalize= transforms.Normalize(mean=[0.485, 0.456, 0.406],\n","                                 std=[0.229, 0.224, 0.225])\n","transformer = transforms.Compose([\n","    transforms.Resize(256),\n","    transforms.CenterCrop(224),\n","    transforms.ToTensor(),\n","    normalize])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['abnormal', 'normal']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"BHZkNnl5VVZt"},"source":["#prediction function\n","def prediction(img_path,transformer):\n","    image=Image.open(img_path)\n","    if image.mode!=\"RGB\":\n","      image=image.convert(\"RGB\")\n","    image_tensor=transformer(image).float()\n","\n","\n","    image_tensor=image_tensor.unsqueeze_(0)\n","\n","    #if torch.cuda.is_available():\n","     #   image_tensor.cuda()#image_tensor=\n","\n","    input=Variable(image_tensor)\n","\n","\n","    output=model(input)\n","    for element in output:\n","        index=element.data.numpy().argmax()#remove .cpu()\n","\n","    pred=classes[index]\n","    return pred"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7MfaFYkxVvQA"},"source":["images_path=glob.glob(pred_path+'/*')\n","pred_dict={}\n","\n","for i in images_path:\n","    pred_dict[i[i.rfind('/')+1:]]=prediction(i,transformer)\n","\n","pred_dict\n","\n","# the line below is for inference on a single image\n","#print(prediction('/content/gdrive/MyDrive/MSDNet-PyTorch/MURA-v1.1/val/normal/image155.png',transformer))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jXVfAlS_EHUL","executionInfo":{"status":"ok","timestamp":1621883422589,"user_tz":-180,"elapsed":248,"user":{"displayName":"Cabdiraxmaan Yusuf","photoUrl":"","userId":"01857871583179459739"}},"outputId":"512d05fe-facc-4d1c-db8f-42aeaf364be7"},"source":["%cd /content/gdrive/MyDrive/MSDNet-PyTorch\n","f=open(\"/content/gdrive/MyDrive/MSDNet-PyTorch/weights/scores.tsv\",\"r+\")\n","#f=open(\"/content/gdrive/MyDrive/train_loss\",\"r\")\n","train_losses=[]\n","val_accuracies=[]\n","lines=f.readlines()\n","\n","i=0 # To remove the first line\n","for line in lines:\n","  i+=1\n","  list_of_values=[]\n","  list_of_values=line.split('\\t')\n","  #print(list_of_values)\n","  if i!=1:\n","    train_losses.append(float(list_of_values[2]))\n","    val_accuracies.append(float(list_of_values[4]))\n","f.close()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content/gdrive/MyDrive/MSDNet-PyTorch\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A8WYOyQeorX5","executionInfo":{"status":"ok","timestamp":1621883423806,"user_tz":-180,"elapsed":325,"user":{"displayName":"Cabdiraxmaan Yusuf","photoUrl":"","userId":"01857871583179459739"}},"outputId":"503a727f-85c1-439c-ad12-d236a1c24377"},"source":["import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(10,5))\n","plt.title(\"Training Loss\")\n","plt.plot(train_losses)\n","plt.xlabel(\"iterations\")\n","plt.ylabel(\"Loss\")\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["No handles with labels found to put in legend.\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"OmNJQdmVwsJY","executionInfo":{"status":"ok","timestamp":1621883346724,"user_tz":-180,"elapsed":378,"user":{"displayName":"Cabdiraxmaan Yusuf","photoUrl":"","userId":"01857871583179459739"}},"outputId":"53a74757-0cbf-4166-9925-6fdee4eceb7b"},"source":["##plot tarin&validation accuracy charts after training\n","plt.figure(figsize=(10,5))\n","plt.title(\"Validation Accuracy\")\n","plt.plot(val_accuracies)\n","plt.xlabel(\"iterations\")\n","plt.ylabel(\"Accuracy\")\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["No handles with labels found to put in legend.\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}